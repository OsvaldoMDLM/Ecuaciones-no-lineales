<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>